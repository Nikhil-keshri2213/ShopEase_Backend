spring.application.name=shopease
# server.servlet.context-path=/api

spring.datasource.url = ${DB_URL}
spring.datasource.username = ${DB_USERNAME}
spring.datasource.password = ${DB_PASSWORD}

spring.jpa.hibernate.ddl-auto = update
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect


spring.mail.host = smtp.gmail.com
spring.mail.port = 587
spring.mail.username = ${MAIL_USERNAME}
spring.mail.password = ${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.starttls.enable = true

# JWT
jwt.auth.secret_key = ${JWT_SECRET_KEY}
jwt.auth.app = authapp
jwt.auth.expires_in = 3600

#Google OAuth Setting
spring.security.oauth2.client.registration.google.client-id = ${GOOGLE_OAUTH2_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret = ${GOOGLE_OAUTH2_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope = openid, profile, email
spring.security.oauth2.client.registration.google.redirect-uri = http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type = authorization_code
spring.security.oauth2.client.registration.google.client-name = Google

spring.security.oauth2.client.provider.google.authorization-uri = https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri = https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri = https://openidconnect.googleapis.com/v1/userinfo


#payment gateway
stripe.api.key=${STRIPE_API_KEY}

# Cloudinary Configuration for image Upload
cloudinary.cloud.name= ${CLOUD_NAME}
cloudinary.api.key=${CLOUD_API_KEY}
cloudinary.api.secret=${CLOUD_API_SECRET}

# Increase file upload size limit
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB